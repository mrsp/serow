#pragma once

#include <string>

#include "mcap/mcap.hpp"

namespace serow {

// Create a schema for PointCloud
static inline mcap::Schema createPointCloudSchema() {
    mcap::Schema schema;
    schema.name = "foxglove.PointCloud";
    schema.encoding = "jsonschema";
    std::string schema_data = R"({
        "title": "foxglove.PointCloud",
        "description": "A collection of N-dimensional points, which may contain additional fields with information like normals, intensity, etc.",
        "$comment": "Generated by https://github.com/foxglove/foxglove-sdk",
        "type": "object",
        "properties": {
            "timestamp": {
                "type": "object",
                "title": "time",
                "properties": {
                    "sec": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "nsec": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999999999
                    }
                },
                "description": "Timestamp of point cloud"
            },
            "frame_id": {
                "type": "string",
                "description": "Frame of reference"
            },
            "pose": {
                "title": "foxglove.Pose",
                "description": "The origin of the point cloud relative to the frame of reference",
                "type": "object",
                "properties": {
                    "position": {
                        "title": "foxglove.Vector3",
                        "description": "Point denoting position in 3D space",
                        "type": "object",
                        "properties": {
                            "x": {
                                "type": "number",
                                "description": "x coordinate length"
                            },
                            "y": {
                                "type": "number",
                                "description": "y coordinate length"
                            },
                            "z": {
                                "type": "number",
                                "description": "z coordinate length"
                            }
                        }
                    },
                    "orientation": {
                        "title": "foxglove.Quaternion",
                        "description": "Quaternion denoting orientation in 3D space",
                        "type": "object",
                        "properties": {
                            "x": {
                                "type": "number",
                                "description": "x value"
                            },
                            "y": {
                                "type": "number",
                                "description": "y value"
                            },
                            "z": {
                                "type": "number",
                                "description": "z value"
                            },
                            "w": {
                                "type": "number",
                                "description": "w value"
                            }
                        }
                    }
                }
            },
            "point_stride": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of bytes between points in the `data`"
            },
            "fields": {
                "type": "array",
                "items": {
                    "title": "foxglove.PackedElementField",
                    "description": "A field present within each element in a byte array of packed elements.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the field"
                        },
                        "offset": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Byte offset from start of data buffer"
                        },
                        "type": {
                            "title": "foxglove.NumericType",
                            "description": "Type of data in the field. Integers are stored using little-endian byte order.",
                            "oneOf": [
                                {
                                    "title": "UNKNOWN",
                                    "const": 0
                                },
                                {
                                    "title": "UINT8",
                                    "const": 1
                                },
                                {
                                    "title": "INT8",
                                    "const": 2
                                },
                                {
                                    "title": "UINT16",
                                    "const": 3
                                },
                                {
                                    "title": "INT16",
                                    "const": 4
                                },
                                {
                                    "title": "UINT32",
                                    "const": 5
                                },
                                {
                                    "title": "INT32",
                                    "const": 6
                                },
                                {
                                    "title": "FLOAT32",
                                    "const": 7
                                },
                                {
                                    "title": "FLOAT64",
                                    "const": 8
                                }
                            ]
                        }
                    }
                },
                "description": "Fields in `data`. At least 2 coordinate fields from `x`, `y`, and `z` are required for each point's position; `red`, `green`, `blue`, and `alpha` are optional for customizing each point's color."
            },
            "data": {
                "type": "string",
                "contentEncoding": "base64",
                "description": "Point data, interpreted using `fields`"
            }
        }
    })";
    schema.data = mcap::ByteArray(
        reinterpret_cast<const std::byte*>(schema_data.data()),
        reinterpret_cast<const std::byte*>(schema_data.data() + schema_data.size()));
    return schema;
}

// Create a schema for tfs
static inline mcap::Schema createTFSchema() {
    mcap::Schema schema;
    schema.name = "foxglove.FrameTransform";
    schema.encoding = "jsonschema";
    std::string schema_data = R"({
        "title": "foxglove.FrameTransform",
        "description": "A transform between two reference frames in 3D space",
        "$comment": "Generated by https://github.com/foxglove/foxglove-sdk",
        "type": "object",
        "properties": {
            "timestamp": {
                "type": "object",
                "title": "time",
                "properties": {
                    "sec": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "nsec": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999999999
                    }
                },
                "description": "Timestamp of transform"
            },
            "parent_frame_id": {
                "type": "string",
                "description": "Name of the parent frame"
            },
            "child_frame_id": {
                "type": "string",
                "description": "Name of the child frame"
            },
            "translation": {
                "title": "foxglove.Vector3",
                "description": "Translation component of the transform",
                "type": "object",
                "properties": {
                    "x": {
                        "type": "number",
                        "description": "x coordinate length"
                    },
                    "y": {
                        "type": "number",
                        "description": "y coordinate length"
                    },
                    "z": {
                        "type": "number",
                        "description": "z coordinate length"
                    }
                }
            },
            "rotation": {
                "title": "foxglove.Quaternion",
                "description": "Rotation component of the transform",
                "type": "object",
                "properties": {
                    "x": {
                        "type": "number",
                        "description": "x value"
                    },
                    "y": {
                        "type": "number",
                        "description": "y value"
                    },
                    "z": {
                        "type": "number",
                        "description": "z value"
                    },
                    "w": {
                        "type": "number",
                        "description": "w value"
                    }
                }
            }
        }
    })";
    schema.data = mcap::ByteArray(
        reinterpret_cast<const std::byte*>(schema_data.data()),
        reinterpret_cast<const std::byte*>(schema_data.data() + schema_data.size()));
    return schema;
}

}  // namespace serow
