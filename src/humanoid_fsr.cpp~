humanoid_fsr::~humanoid_fsr() {
	if (is_connected_)
		disconnect();
}

void humanoid_fsr::disconnect() {
	if (!is_connected_)
		return;
	
	is_connected_ = false;
}



humanoid_fsr::humanoid_fsr()
{

	fsr_inc = false;

}

void humanoid_ekf::run() {
	while (ros::ok()) {

	   static ros::Rate rate(1.5*fsr_freq);  //ROS Node Loop Rate

		if(fsr_inc){
	   computeCOP();
	   computeFT();

	   fsr_inc = false;

	}
	ros::spinOnce();
		rate.sleep();
	}
}

bool humanoid_fsr::connect(const ros::NodeHandle nh) {
	// Initialize ROS nodes
	n = nh;
	// Load ROS Parameters
	loadparams();
	//Subscribe/Publish ROS Topics/Services
	subscribe();
	advertise();

	is_connected_ = true;

	ROS_INFO_STREAM("Humanoid State Estimator Initialized");

	return true;
}



bool humanoid_fsr::connected() {
	return is_connected_;
}

void humanoid_fsr::subscribe()
{
	subscribeToFSR();
	ros::Duration(0.5).sleep();
	getFSRPos();
	ros::Duration(0.5).sleep();
}



void humanoid_fsr::computeCOP() {



	copl = Vector3d::Zero();
	copr = Vector3d::Zero();

	// Computation of the CoP in the Local Coordinate Frame of the Foot
	copl(0) =  lfsr1_msg.wrench.force.z * lfsr1_pos(0) + lfsr2_msg.wrench.force.z * lfsr2_pos(0)+
	lfsr3_msg.wrench.force.z * lfsr3_pos(0) + lfsr4_msg.wrench.force.z * lfsr4_pos(0);

	copl(1) =  lfsr1_msg.wrench.force.z * lfsr1_pos(1) + lfsr2_msg.wrench.force.z * lfsr2_pos(1)+
	lfsr3_msg.wrench.force.z * lfsr3_pos(1) + lfsr4_msg.wrench.force.z * lfsr4_pos(1);

	copr(0) =  rfsr1_msg.wrench.force.z * rfsr1_pos(0) + rfsr2_msg.wrench.force.z * rfsr2_pos(0)+
	rfsr3_msg.wrench.force.z * rfsr3_pos(0) + rfsr4_msg.wrench.force.z * rfsr4_pos(0);

	copr(1) =  rfsr1_msg.wrench.force.z * rfsr1_pos(1) + rfsr2_msg.wrench.force.z * rfsr2_pos(1)+
	rfsr3_msg.wrench.force.z * rfsr3_pos(1) + rfsr4_msg.wrench.force.z * rfsr4_pos(1);



}

void humanoid_fsr::computeFT() {

	fl = lfsr1_msg.wrench.force.z + lfsr2_msg.wrench.force.z + lfsr3_msg.wrench.force.z +  lfsr4_msg.wrench.force.z;
	fr = rfsr1_msg.wrench.force.z + rfsr2_msg.wrench.force.z + rfsr3_msg.wrench.force.z +  rfsr4_msg.wrench.force.z;
	
	LeftFoot_GRF = Vector3d(0,0,fl*g);
	RightFoot_GRF = Vector3d(0,0,fr*g);


	LeftFoot_GRT = lfsr1_pos.cross(Vector3d(0,0,lfsr1_msg.wrench.force.z * g)) + lfsr2_pos.cross(Vector3d(0,0,lfsr2_msg.wrench.force.z * g)) + lfsr3_pos.cross(Vector3d(0,0,lfsr3_msg.wrench.force.z * g)) + lfsr4_pos.cross(Vector3d(0,0,lfsr4_msg.wrench.force.z * g));

	RightFoot_GRT = rfsr1_pos.cross(Vector3d(0,0,rfsr1_msg.wrench.force.z * g)) + rfsr2_pos.cross(Vector3d(0,0,rfsr2_msg.wrench.force.z * g)) + rfsr3_pos.cross(Vector3d(0,0,rfsr3_msg.wrench.force.z * g)) + rfsr4_pos.cross(Vector3d(0,0,rfsr4_msg.wrench.force.z * g));

}


void humanoid_fsr::loadparams() {

	ros::NodeHandle n_p("~");
	// Load Server Parameters
	n_p.param<std::string>("lfoot",lfoot_frame,"l_sole");
	n_p.param<std::string>("rfoot",rfoot_frame,"r_sole");
	n_p.param<double>("fsr_topic_freq",fsr_freq,100.0);
	n_p.param<std::string>("lfsr1",lfsr1_frame,"LFsrFL_frame");
	n_p.param<std::string>("lfsr2",lfsr2_frame,"LFsrFR_frame");
	n_p.param<std::string>("lfsr3",lfsr3_frame,"LFsrRL_frame");
	n_p.param<std::string>("lfsr4",lfsr4_frame,"LFsrRR_frame");

	n_p.param<std::string>("rfsr1",rfsr1_frame,"RFsrFL_frame");
	n_p.param<std::string>("rfsr2",rfsr2_frame,"RFsrFR_frame");
	n_p.param<std::string>("rfsr3",rfsr3_frame,"RFsrRL_frame");
	n_p.param<std::string>("rfsr4",rfsr4_frame,"RFsrRR_frame");


	n_p.param<std::string>("lfsr1_topic",lfsr1_topic,"LfsrFL");
	n_p.param<std::string>("lfsr2_topic",lfsr2_topic,"LfsrFR");
	n_p.param<std::string>("lfsr3_topic",lfsr3_topic,"LfsrRL");
	n_p.param<std::string>("lfsr4_topic",lfsr4_topic,"LfsrRR");
	n_p.param<std::string>("rfsr1_topic",rfsr1_topic,"RfsrFL");
	n_p.param<std::string>("rfsr2_topic",rfsr2_topic,"RfsrFR");
	n_p.param<std::string>("rfsr3_topic",rfsr3_topic,"RfsrRL");
	n_p.param<std::string>("rfsr4_topic",rfsr4_topic,"RfsrRL");

}



void humanoid_fsr::subscribeToFSR()
{
	//Left Foot
	lfsr1_sub = n.subscribe(lfsr1_topic,1,&humanoid_fsr::lfsr1Cb,this);
	lfsr2_sub = n.subscribe(lfsr2_topic,1,&humanoid_fsr::lfsr2Cb,this);
	lfsr3_sub = n.subscribe(lfsr3_topic,1,&humanoid_fsr::lfsr3Cb,this);
	lfsr4_sub = n.subscribe(lfsr4_topic,1,&humanoid_fsr::lfsr4Cb,this);

	//Right Foot
	rfsr1_sub = n.subscribe(rfsr1_topic,1,&humanoid_fsr::rfsr1Cb,this);
	rfsr2_sub = n.subscribe(rfsr2_topic,1,&humanoid_fsr::rfsr2Cb,this);
	rfsr3_sub = n.subscribe(rfsr3_topic,1,&humanoid_fsr::rfsr3Cb,this);
	rfsr4_sub = n.subscribe(rfsr4_topic,1,&humanoid_fsr::rfsr4Cb,this);
}

void humanoid_fsr::lfsr1Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	lfsr1_msg = *msg;
	fsr_inc = true;
}
void humanoid_fsr::lfsr2Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	lfsr2_msg = *msg;
}
void humanoid_fsr::lfsr3Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	lfsr3_msg = *msg;
}
void humanoid_fsr::lfsr4Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	lfsr4_msg = *msg;
}
void humanoid_fsr::rfsr1Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	rfsr1_msg = *msg;
}
void humanoid_fsr::rfsr2Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	rfsr2_msg = *msg;
}
void humanoid_fsr::rfsr3Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	rfsr3_msg = *msg;
}
void humanoid_fsr::rfsr4Cb(const geometry_msgs::WrenchStamped::ConstPtr& msg)
{
	rfsr4_msg = *msg;
}


void humanoid_fsr::getFSRPos()
{
	try{
	Tfsr_listener.lookupTransform(lfoot_frame, lfsr1_frame,  
				ros::Time(0), Tfsr_tf);
	lfsr1_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}

	try{
	Tfsr_listener.lookupTransform(lfoot_frame, lfsr2_frame,  
				ros::Time(0), Tfsr_tf);
	lfsr2_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}

	try{
	Tfsr_listener.lookupTransform(lfoot_frame, lfsr3_frame,  
				ros::Time(0), Tfsr_tf);
	lfsr3_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}

	try{
	Tfsr_listener.lookupTransform(lfoot_frame, lfsr4_frame,  
				ros::Time(0), Tfsr_tf);
	lfsr4_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}

	try{
	Tfsr_listener.lookupTransform(rfoot_frame, rfsr1_frame,  
				ros::Time(0), Tfsr_tf);
	rfsr1_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}


	try{
	Tfsr_listener.lookupTransform(rfoot_frame, rfsr2_frame,  
				ros::Time(0), Tfsr_tf);
	rfsr2_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}


	try{
	Tfsr_listener.lookupTransform(rfoot_frame, rfsr3_frame,  
				ros::Time(0), Tfsr_tf);
	rfsr3_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}

	try{
	Tfsr_listener.lookupTransform(rfoot_frame, rfsr4_frame,  
				ros::Time(0), Tfsr_tf);
	rfsr4_pos << Tfsr_tf.getOrigin().x(), Tfsr_tf.getOrigin().y();
	}
	catch (tf::TransformException ex){
	ROS_ERROR("%s",ex.what());
	}
}

