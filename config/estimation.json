// json does not support comments by default. To this end, this file serves as an explanation for 
// the parameters considered in SEROW.
// Users are encouraged to replicate a configuration file similarly to "nao.json" for their robot 
// and use this file as a reference only.
{
   // string: base frame of the robot to be estimated
  "base_frame": "base_link",
  
  // boolean: does the robot have point feet or flat feet?
  "point_feet": false,
  
  // dictionary: leg end-effector frames 
  "foot_frames": {
      "0": "left_foot",
      "1": "right_foot"
  },
  
  // string: robot URDF file, should be placed inside the urdf folder  
  "model_path": "my_robot.urdf",
  
  // double: total mass of the robot (kg)
  "mass": 130.0, 
  
  // double: gravity constant (m/s^2)
  "g": 9.81,
  
  // double: rate at which joint encoders produce measurements (Hz)
  "joint_rate": 100.0, 
  
  // Joint velocities estimator
  // boolean: whether or not to estimate the joint velocities, if set to false then the user must 
  // provide them
  "estimate_joint_velocity": true,
  // double: low-pass filter cutoff frequency (Hz), used to filter the joint encoder measurements. 
  // Cannot be greater than joint_rate / 2.0. Only applies if estimate_joint_velocity = true
  "joint_cutoff_frequency": 10.0, 
  
  // double: measurement noise of joint encoder (rad^2)
  "joint_position_variance": 0.1,
  
  // Angular momentum derivative estimator
  // double: low-pass filter cutoff frequency (Hz), used to filter the angular momentum around the 
  // CoM. Cannot be greater than joint_rate / 2.0
  "angular_momentum_cutoff_frequency": 5.0,
  
  // Contact point estimator
  // double: cost weight when computing the instantaneous moment pivot with kinematics. 
  // Only applies for flat feet
  "tau_0": 1.0,
  // double: cost weight when computing the instantaneous moment pivot with F/T. 
  // Only applies for flat feet
  "tau_1": 0.1,
  
  // double: rate at which IMU measurements are available (Hz)
  "imu_rate": 100.0,
  
  // array: rotation matrix from base frame to IMU gyro frame
  "R_base_to_gyro": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
  
  // array: rotation matrix from base frame to IMU accelerometer frame
  "R_base_to_acc": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
  
  // boolean: whether or not to estimate initial values for the IMU gyro/accelerometer biases
  "calibrate_imu": false,
  
  // integer: number of IMU measurements to use for estimating the IMU gyro/accelerometer biases
  "max_imu_calibration_cycles": 300,
  
  // array: if available - accelerometer bias (m/s^2). Only applies if calibrate_imu = false
  "bias_acc": [0.0, 0.0, 0.0],
  
  // array: if available - gyro bias (rad/s). Only applies if calibrate_imu = false
  "bias_gyro": [0.0, 0.0, 0.0],
  
  // Base angular acceleration estimator
  // double: low-pass filter cutoff frequency (Hz), used to filter the IMU gyro measurement. 
  // Cannot be greater than imu_rate / 2.0
  "gyro_cutoff_frequency": 5.0,
  
  // double: rate at which leg end-effector force (and optionally torque) measurements are available
  "force_torque_rate": 500.0,
  
  // dictionary: rotation matrix from each foot frame to force sensor frame
  "R_foot_to_force": {
      "0": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0],
      "1": [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
  },
  // dictionary: rotation matrix from each foot frame to torque sensor frame. 
  // Can be null if the robot only has FSRs instead of F/T
  "R_foot_to_torque": null,
  
  // Base attitude estimator
  // double: base orientation complimentary filter proportional gain
  "attitude_estimator_proportional_gain": 0.02,
  // double: base orientation complimentary filter integral gain. Can be 0
  "attitude_estimator_integral_gain": 0.0,

  // Contact status estimator
  // boolean: whether or not to estimate the leg end-effector contact status. If set to false, 
  // the user should provide the end-effector contact probabilities
  "estimate_contact_status": true,
  // double: Schmidt-Trigger high threshold (N) i.e. mass * g / 3.0
  // Note, must be very carefully tuned since base estimator is directly affected by the robot's 
  // contact status.
  // Only applies if estimate_contact_status = true
  "high_threshold": 350.0,
  // double: Schmidt-Trigger high threshold (N) i.e. mass * g / 6.0. 
  // Note, must be very carefully tuned since base estimator is directly affected by the robot's 
  // contact status.
  // Only applies if estimate_contact_status = true
  "low_threshold": 125.0,
  // integer: moving median filter batch used to remove leg end-effector vertical force outliers.
  // Only applies if estimate_contact_status = true
  "median_window": 13,

  // Base estimator
  // boolean: whether or not to remove outlier leg end-effector kinematic measurements in base 
  // estimation
  "outlier_detection": false,
  // integer: after how many loop cycles SEROW's estimate is considered valid e.g. all the filters 
  // have converged and estimate should become available for feedback
  "convergence_cycles": 0,
  // array: gyro random walk. Can be found in the IMU data sheet or computed with the Alan variance 
  // method
  "imu_angular_velocity_covariance": [1e-4, 1e-4, 1e-4],
  // array: gyro bias instability (or stability). Can be found in the IMU data sheet or computed 
  // with the Alan variance method
  "imu_angular_velocity_bias_covariance": [1e-6, 1e-6, 1e-6],
  // array: accelerometer random walk. Can be found in the IMU data sheet or computed with the Alan 
  // variance method
  "imu_linear_acceleration_covariance": [1e-3, 1e-3, 1e-3],
  // array: accelerometer bias instanbility (or stability). Can be found in the IMU data sheet or 
  // computed with the Alan variance method
  "imu_linear_acceleration_bias_covariance": [1e-5, 1e-5, 1e-5],
  // array: minimum leg end-effector contact relative to base frame position uncertainty (m^2)
  "contact_position_covariance": [1e-6, 1e-6, 1e-6],
  // array: minimum leg end-effector contact orientation relative to base frame uncertainty (rad^2)
  "contact_orientation_covariance": [1e-3, 1e-3, 1e-3],
  // array: leg end-effector contact position slip uncertainty (m^2)
  "contact_position_slip_covariance": [1e-4, 1e-4, 1e-4],
  // array: leg end-effector contact orientation slip uncertainty (m^2)
  "contact_orientation_slip_covariance": [1e-3, 1e-3, 1e-3],
  // array: initial uncertainty for the base position (m^2)
  "initial_base_position_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the base orientation (rad^2)
  "initial_base_orientation_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the base linear velocity (m^2/s^2)
  "initial_base_linear_velocity_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the leg end-effector contact position (m^2)
  "initial_contact_position_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the leg end-effector contact orientation (rad^2)
  // only applies for flat feet
  "initial_contact_orientation_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for IMU linear acceleration bias (m^2/s^4)
  "initial_imu_linear_acceleration_bias_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for IMU gyro bias (rad^2/s^2)
  "initial_imu_angular_velocity_bias_covariance": [1.0, 1.0, 1.0],

  // CoM Estimator
  // array: CoM position process noise (m^2)
  "com_position_process_covariance": [1e-6, 1e-6, 1e-6],
  // array: CoM linear velocity process noise (m^2/s^2)
  "com_linear_velocity_process_covariance": [1e-4, 1e-4, 1e-4],
  // array: External forces acting on CoM process noise (N^2)
  "external_forces_process_covariance": [1e-2, 1e-2, 1e-2],
  // array: CoM position uncertainty (m^2) as computed with robot kinematics
  "com_position_covariance": [1e-6, 1e-6, 1e-6],
  // array: CoM linear acceleration (m^2/s^4) as approximated with the IMU acceleration and robot 
  // kinematics
  "com_linear_acceleration_covariance": [1e-3, 1e-3, 1e-3],
  // array: initial uncertainty for the CoM position (m^2)
  "initial_com_position_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the CoM linear velocity (m^2/s^2)
  "initial_com_linear_velocity_covariance": [1.0, 1.0, 1.0],
  // array: initial uncertainty for the external forces acting on the CoM (N)
  "initial_external_forces_covariance": [1.0, 1.0, 1.0],

  // array: rigid body transformation from optional exteroceptive (visual/lidar odometry) to base 
  // frame. Can be null if no exteroceptive odometry is provided
  "T_base_to_odom": [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0],
  
  // boolean: whether or not the robot is walking on flat terrain, used to eliminate vertical base 
  // drift
  "is_flat_terrain": false,
  // double: virtual flat terrain measurement uncertainty (m^2)
  // Only applies if is_flat_terrain = true
  "terrain_height_covariance": 1e-3
}
